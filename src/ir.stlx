load("util.stlx");
load("parser.stlx");

class inst(id, data, start, end) {
	id        := id;
	data      := data;
	start     := start;
	end       := end;
	className := procedure() { return "inst"; };
	is        := procedure(x) { return id == x; };
	displayStr := procedure() {
		res := om;
		if (data == om) {
			res := id;
		} else {
			res := id + "('" + data + "')";
		}
		return res;
	};
	toStr := displayStr;
}

class proc(name, args, ir, start, end) {
	name       := name;
	args       := args;
	ir         := ir;
	start      := start;
	end        := end;
	className  := procedure() { return "proc"; };
	dumpToStr := procedure() {
		s := this.displayStr();
		if (#ir.code > 0) { s += " {\n  " + join([instr.displayStr() : instr in ir.code], "\n  ") + "\n}"; }
		else { s += " {}"; }
		return s;
	};
	displayStr := procedure() {
		s := name;
		if (#args > 0) { s += "(\n  " + join([arg.displayStr() : arg in args], "\n  ") + "\n)"; }
		else { s += "()"; }
		return s;
	};
	toStr := displayStr;
}

class intermediateRep(procs := [], vars := {}, code := []) {
	procs := procs;
	vars  := vars;
	code  := code;
	className := procedure() { return "intermediateRep"; };
	dumpToStr := procedure() {
		s := "Procedures:";
		for (p in procs)    { s += "\n" + p.dumpToStr(); }
		s += "\nVariables:";
		for (var  in vars)  { s += "\n" + var; }
		s += "\nCode:";
		for (c    in code)  { s += "\n" + c.displayStr(); }
		return s;
	};
	displayStr := procedure() {
		return "ir(#procs = " + #procs + ", #vars = " + #vars + ", #code = " + #code + ")";
	};
	toStr := displayStr;
}

// Returns array with 2 elements
// First a list of IR instructions, then a set of variables, that was used in the expression
codegenExpr := procedure(file, node) {
	global.push("codegenExpr", [["ast", node.displayStr()]]);
	res := [[], {}];
	// global.p("codegenExpr - node: " + node.id);
	match(node.id) {
		case "BinOp":
			res := pointAdd(res, codegenExpr(file, node.args[1]));
			res := pointAdd(res, codegenExpr(file, node.args[2]));
			op  := node.data;
			if (op == "AddColl" || op == "MulColl") { op += "Bin"; }
			res[1] += [inst(op, om, node.start, node.end)];
		case "UnaryOp":
			res := pointAdd(res, codegenExpr(file, node.args[1]));
			op  := node.data;
			if      (op == "Sub")  { op := "Neg"; }
			else if (op == "Hash") { op := "Len"; }
			res[1] += [inst(op, om, node.start, node.end)];
		case "Call":
			for (arg in node.args) {
				res := pointAdd(res, codegenExpr(file, arg));
			}
			res[1] += [inst("Int", #node.args, node.start, node.end)];
			res[1] += [inst("Var", node.data.data, node.start, node.end)];
			res[1] += [inst("Call", om, node.start, node.end)];
		case "Property":
			res := pointAdd(res, codegenExpr(file, node.data));
			res := pointAdd(res, codegenExpr(file, node.args[1]));
		case "Index":
			if (node.args[2].id == "Range") {
				res := pointAdd(res, codegenExpr(file, node.args[2]));
			} else {
				res    := pointAdd(res, codegenExpr(file, node.args[1]));
				res    := pointAdd(res, codegenExpr(file, node.args[2]));
				res[1] += [inst("Index", om, node.start, node.end)];
			}
		case "Range":
			list := codegenExpr(file, node.args[1]);
			res  := pointAdd(res, list);
			if (node.args[2] == om) {
				res[1] += [inst("Int", 1, node.args[1].end, node.args[1].end)];
			} else {
				res := pointAdd(res, codegenExpr(file, node.args[2]));
			}
			if (node.args[3] == om) {
				res    := pointAdd(res, list);
				res[1] += [inst("Len", om, node.end, node.end)];
			} else {
				res := pointAdd(res, codegenExpr(file, node.args[3]));
			}
			res[1] += [inst("Range", om, node.start, node.end)];
		case "List":
			for (expr in node.args) {
				res := pointAdd(res, codegenExpr(file, expr));
			}
			res[1] += [inst("Int", #node.args, node.start, node.end)];
			res[1] += [inst(node.id, om, node.start, node.end)];
		case "Set":
			for (expr in node.args) {
				res := pointAdd(res, codegenExpr(file, expr));
			}
			res[1] += [inst("Int", #node.args, node.start, node.end)];
			res[1] += [inst(node.id, om, node.start, node.end)];
		case "Str":
			res[1] += [inst("Str", node.data, node.start, node.end)];
		case "Float":
			res[1] += [inst(node.id, node.data, node.start, node.end)];
		case "Int":
			res[1] += [inst(node.id, node.data, node.start, node.end)];
		case "Bool":
			res[1] += [inst(node.id, node.data, node.start, node.end)];
		case "Iden":
			res[1] += [inst("Var", node.data, node.start, node.end)];
			res[2] += {node.data};
		default:
			compileErr(file, node.start, node.end, "Encountered unexpected node in codegenExpr: " + node.id);
	}
	global.pop();
	return res;
};

// Returns an array with 2 or 3 elements
// 1. List of IR instructions
// 2. Set of variable names used in statement
// 3. Procedure that was defined (potentially empty)
codegenAssign := procedure(file, node, procNames) {
	global.push("codegenAssign", [["node", node.displayStr()]]);
	if (!node.is("Assign")) { stop("Start Assumption of codegenAssign broken. Expects node to be a Assign, but received a " + node.id + " instead."); }

	res := [[], {}];
	if (node.args[2].id == "Proc") {
		p      := codegenProc(file, node.args[2], procNames, node.args[1].data);
		res    += [p];
		res[1] += [inst("Proc", p.name, p.start, p.end)];
	} else {
		res := pointAdd(res, codegenExpr(file, node.args[2]));
	}
	[res[1], res[2]] := pointAdd([res[1], res[2]], codegenExpr(file, node.args[1]));
	res[1] += [inst("Assign", om, node.start, node.end)];

	global.pop();
	return res;
};

// @Note: Returns a 2D array of instructions. Each instruction is a list containing a 'Var' and optionally also an 'Assign' instruction (including all the instructions for the assignment).
// @Note: If 'flatList' is true, the return value is a flat 1D list of the same instructions instead
codegenArgList := procedure(file, ast, flatList := false) {
	global.push("codegenArgList", [["ast", ast.displayStr()], ["flatList", flatList]]);
	if (!ast.is("ArgList")) { stop("Start Assumption of codegenArgList broken. Expects ast to be a ArgList, but received a " + ast.id + " instead."); }

	res := [];
	for (node in ast.args) {
		insts := [];
		match(node.id) {
			case "Iden"  : insts += codegenExpr(file, node)[1];
			case "Assign": insts += codegenAssign(file, node, procNames)[1]; // @Study: Could a procedure be assigned here?
			default      : compileErr(file, node.start, node.end, "Encountered unexpected node in codegenArgList: " + node.id);
		}
		if (flatList) { res += insts;   }
		else          { res += [insts]; }
	}

	global.pop();
	return res;
};

codegenProc := procedure(file, node, procNames, procName := om) {
	global.push("codegenProc", [["node", node.displayStr()], ["procNames", procNames], ["procName", procName]]);
	args := codegenArgList(file, node.args[1], false);
	ir   := codegen(file, node.args[2], procNames);
	if (procName == om) { procName := "anon_proc"; }
	if (procName in procNames) {
		i := 1;
		while ((procName + i) in procNames) { i += 1; }
		procName += i;
	}
	procNames += {procName};
	global.pop();
	return proc(procName, args, ir, node.start, node.end);
};

getVarInits := procedure(vars := {}) {
	res := [];
	for (var in vars) {
		res += [inst("Om", om, 0, 0), inst("Var", var, 0, 0), inst("Assign", om, 0, 0)];
	}
	return res;
};

// Generate an intermediateRep object for a block of code
codegenBlock := procedure(file, ast, procNames) {
	global.push("codegenBlock", [["file", file], ["ast", ast.displayStr()]]);
	if (!ast.is("Block")) { stop("Start Assumption of codegenBlock broken. Expects ast to be a Block, but received a " + ast.id + " instead."); }

	ir := intermediateRep();
	for (node in ast.args) {
		// global.p("codegenBlock - node: " + node.id);
		match(node.id) {
			case "Block":
				block    := codegenBlock(file, node, procNames);
				ir.code  += block.code;
				ir.procs += block.procs;
				ir.vars  += block.vars;
			case "Ret":
				expr    := codegenExpr(file, node.args[1]);
				ir.code += expr[1];
				ir.vars += expr[2];
				ir.code += [inst("Ret", om, node.start, node.end)];
			case "Assign":
				t       := codegenAssign(file, node, procNames);
				ir.code += t[1];
				ir.vars += t[2];
				if (#t == 3) { ir.procs += [t[3]]; }
			case "ArgList":
				// @TODO: This is probably not correct, because ir.code should be a 1D list and codegenArgList returns a 2D List here...
				ir.code += codegenArgList(file, node);
			case "Proc":
				// If the Proc appears here, it is never assigned and can thus never be called
				// We can therefore safely ignore the procedure
				// ir.procs += [codegenProc(file, node)];
			case "If":
				label     := global.labelCounter.get();
				body      := codegenBlock(file, node.args[2], procNames);
				body.code += [inst("Label", label, node.end, node.end)];
				ir.vars   += body.vars;

				cond     := codegenExpr(file, node.args[1]);
				ir.vars  += cond[2];
				ir.code  += cond[1];
				ir.code  += [inst("CondJmp", label, node.start, node.end)];
				ir.code  += body.code;
				ir.procs += body.procs;
			case "Else":
				prevLabel := ir.code[#ir.code];
				ir.code   := ir.code[1..#ir.code-1];
				cond      := om;
				body      := om;
				if (#node.args == 2) {
					[cond, body] := node.args;
				} else {
					body := node.args[1];
				}
				body      := codegenBlock(file, body, procNames);
				ir.vars   += body.vars;
				label     := global.labelCounter.get();
				body.code += [inst("Label", label, node.end, node.end)];
				ir.code   += [inst("Jmp", label, node.start, node.end)];
				ir.code   += [prevLabel];
				if (cond != om) {
					cond    := codegenExpr(file, cond);
					ir.vars += cond[2];
					ir.code += cond[1];
					ir.code += [inst("CondJmp", label, node.start, node.end)];
				}
				ir.code  += body.code;
				ir.procs += body.procs;
			case "Class":
				compileErr(file, node.start, node.end, "Codegen for Classes is not yet implemented");
			case "Static":
				compileErr(file, node.start, node.end, "Codegen for Static blocks is not yet implemented");
			case "For":
				compileErr(file, node.start, node.end, "Codegen for For-Loops is not yet implemented");
			case "While":
				compileErr(file, node.start, node.end, "Codegen for While-Loops is not yet implemented");
			case "DoWhile":
				compileErr(file, node.start, node.end, "Codegen for DoWhile-Loops is not yet implemented");
			default:
				expr    := codegenExpr(file, node);
				ir.code += expr[1];
				ir.vars += expr[2];
		}
	}

	global.pop();
	return ir;
};

codegen := procedure(file, ast, procNames := {}) {
	global.push("codegen", [["ast", ast.displayStr()], ["procNames", procNames]]);
	ir        := codegenBlock(file, ast, procNames);
	ir.code   := getVarInits(ir.vars) + ir.code;
	global.pop();
	return ir;
};