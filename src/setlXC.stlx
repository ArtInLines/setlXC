load("util.stlx");
load("lexer.stlx");
load("parser.stlx");
load("imports.stlx");
load("ir.stlx");
load("transpile.stlx");

compile := procedure(file) {
	global.push("compile", [["file", file]]);
	str  := join(readFile(file), "\n");
	toks := lexer(file, str).lex();
	ast  := parser(file, toks).parse();
	ast  := addImports(file, ast)[1];
	if (global.fullDebug) {
		print("AST:"); // @Cleanup
		print(ast.dumpToStr(global.debug));
	}
	ir   := codegenBlock(file, ast);
	if (global.fullDebug) {
		print("\nIR:"); // @Cleanup
		print(ir.displayStr());
	}

	c := irToC(file, ir);
	writeFile("../out.c", c); // @TODO: Provide parameter for name of output file
	global.pop();
};


main := procedure(params) {
	if (#params < 1) {
		printErr("Not enough arguments were provided.");
		printErr();
		printErr("Usage:");
		printErr("setlX setlXC.stlx -p <filename> [-dd]");
		printErr("The flag '-d'  is optional and enables debugging mode.      It prints some useful debugging information.");
		printErr("The flag '-dd' is optional and enables full debugging mode. It prints alongside the usual debug info also the AST and IR.");
		return;
	}

	if (#params >= 2 && params[2][..2] == "-d") {
		global.debug := true;
		if (params[2][3] == "d") { global.fullDebug := true; }
	}

	global.push("main", [["params", params]]);
	try {
		compile(params[1]);
	} catch (e) {
		printErr(e);
		if (global.debug) {
			printErr("\nStack:");
			printErr(global.st.toStr());
		}
	}
};

main(params);