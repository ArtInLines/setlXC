load("util.stlx");
load("ir.stlx");

// @Note: These should all be global variables, but adding these to a class' static section, uses too much memory for setlX' stack apparently
class irToCVars() {
	structPrefix := "__struct_";
	valStruct    := structPrefix + "Value";
	varPrefix    := "__stlx_";
	procPrefix   := "__proc_";
	enumPrefix   := "__enum_Type_";
	assignedVars := {};
	varCounter   := counter(varPrefix);
	getVarName   := procedure(instr) {
		if (startsWith(instr.data, varPrefix)) { return instr.data; }
		else { return varPrefix + instr.data; }
	};
}

makeListValLiteral := procedure(len, toCVars) {
	return "{.type = " + toCVars.enumPrefix + "List" + ", .data = {.l = ail_da_with_cap(char, sizeof(" + toCVars.valStruct + ") * " + len + ")}}";
};

// @Note: returns an array with 2 values (first the value that can be used in any expression and then a string for statements that need to come before using the first value)
makeValueStruct := procedure(file, name, instr, toCVars, len := om, reassigns := false) {
	global.push("makeValueStruct", [["instr", instr.toStr()]]);
	if (instr.className() != "inst") { stop("makeValueStruct Start Assumption broken"); }
	var := "";
	if (!reassigns) { var += toCVars.valStruct + " "; }
	var += name + " = ";
	if (reassigns) { var += "(" + toCVars.valStruct + ") "; }
	// @TODO: Need to create variables for lists/sets and then using that variable as a value
	match(instr.id) {
		case "Var":
			var += toCVars.getVarName(instr) + ";\n";
		case "Str":
			// @TODO: Escape certain characters in string
			var += "{.type = " + toCVars.enumPrefix + "Str" + ", .data = {.s = \"" + instr.data + "\"}};\n";
		case "Int":
			var += "{.type = " + toCVars.enumPrefix + "Int" + ", .data = {.i = " + instr.data + "}};\n";
		case "Float":
			var += "{.type = " + toCVars.enumPrefix + "Float" + ", .data = {.f = " + instr.data + "}};\n";
		case "Bool":
			var += "{.type = " + toCVars.enumPrefix + "Bool" + ", .data = {.b = " + instr.data + "}};\n";
		case "List":
			var += makeListValLiteral(len, toCVars) + ";\n";
		case "Proc":
			var += "{.type = " + toCVars.enumPrefix + "Proc" + ", .data = {.x = &" + toCVars.procPrefix + instr.data + "}};\n";
		case "Om":
			var += "{0};\n";
		default:
			compileErr(file, instr.start, instr.end, "Making a value out of a '" + instr.id + "' is not yet implemented");
	}
	global.pop();
	return [name, var];
};

irCodeToC := procedure(file, code, toCVars) {
	global.push("irCodeToC", []);
	getVar := closure() { return toCVars.varCounter.get(); };

	res := "";
	st  := stack();
	for (instr in code) {
		global.p("irCodeToC - instr: " + instr.id);
		match (instr.id) {
			case "And":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'And' to C code is not yet implemented");
			case "Or":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Or' to C code is not yet implemented");
			case "Eq":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_eq_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + ");\n";
				res   += opRes;
			case "Ne":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_logical_not(__builtin_stlx_eq_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + "));\n";
				res   += opRes;
			case "Ge":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_ge_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + ");\n";
				res   += opRes;
			case "Le":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_le_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + ");\n";
				res   += opRes;
			case "Gt":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_gt_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + ");\n";
				res   += opRes;
			case "Lt":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_lt_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + ");\n";
				res   += opRes;
			case "In":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'In' to C code is not yet implemented");
			case "Add":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_add_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", " + name + ");\n";
				res   += opRes;
			case "Sub":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_sub_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", ";
				opRes += name;
				opRes += ");\n";
				res   += opRes;
			case "Mul":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_mul_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", ";
				opRes += name;
				opRes += ");\n";
				res   += opRes;
			case "Div":
				op2 := st.pop();
				op1 := st.pop();
				tmpVar := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes  := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), op1, toCVars);
				res   += var;
				opRes += "__builtin_stlx_div_values(";
				opRes += name;
				[name, var] := makeValueStruct(file, getVar(), op2, toCVars);
				res   += var;
				opRes += ", ";
				opRes += name;
				opRes += ");\n";
				res   += opRes;
			case "Mod":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Mod' to C code is not yet implemented");
			case "IntDiv":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'IntDiv' to C code is not yet implemented");
			case "Exp":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Exp' to C code is not yet implemented");
			case "CartProd":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'CartProd' to C code is not yet implemented");
			case "AddCollBin":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'AddCollBin' to C code is not yet implemented");
			case "MulCollBin":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'MulCollBin' to C code is not yet implemented");
			case "AddColl":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'AddColl' to C code is not yet implemented");
			case "MulColl":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'MulColl' to C code is not yet implemented");
			case "Not":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Not' to C code is not yet implemented");
			case "Neg":
				operand := st.pop();
				tmpVar  := getVar();
				st.push(inst("Var", tmpVar, instr.start, instr.end));
				opRes   := toCVars.valStruct + " " + tmpVar + " = ";
				[name, var] := makeValueStruct(file, getVar(), operand, toCVars);
				res     += var;
				opRes   += "__builtin_stlx_neg_value(" + name + ");\n";
				res     += opRes;
			case "Len":
				coll    := st.pop();
				ret     := getVar();
				st.push(inst("Var", ret, instr.start, instr.end));
				lenInst := inst("Int", toCVars.getVarName(coll) + ".data.l.len", instr.start, instr.end);
				[name, var] := makeValueStruct(file, ret, lenInst, toCVars);
				res     += var;
			case "Assign":
				reassigns := true;
				out      := toCVars.getVarName(st.pop());
				if (out notin toCVars.assignedVars) {
					toCVars.assignedVars += {out};
					reassigns    := false;
				}
				val      := st.pop();
				[_, var] := makeValueStruct(file, out, val, toCVars, om, reassigns);
				res      += var;
			case "Ret":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Ret' to C code is not yet implemented");
			case "Range":
				hi     := st.pop();
				lo     := st.pop();
				coll   := st.pop();
				out    := getVar();
				st.push(inst("Var", out, instr.start, instr.end));
				[hiTmp, hivar] := makeValueStruct(file, getVar(), hi, toCVars);
				[loTmp, lovar] := makeValueStruct(file, getVar(), lo, toCVars);
				res    += lovar;
				res    += hivar;
				loname := getVar();
				hiname := getVar();
				res    += "u32 " + loname + " = __builtin_stlx_get_idx(" + loTmp + ", " + toCVars.getVarName(coll) + ");\n";
				res    += "u32 " + hiname + " = __builtin_stlx_get_idx(" + hiTmp + ", " + toCVars.getVarName(coll) + ");\n";
				len    := getVar();
				res    += "u32 " + len + " = " + hiname + " - " + loname + " + 1;\n";
				res    += toCVars.valStruct + " " + out + " = " + makeListValLiteral(len, toCVars) + ";\n";
				res    += out + ".data.l.len = " + len + ";\n";
				res    += "memcpy(" + out + ".data.l.data, &((" + toCVars.valStruct + " *) " + toCVars.getVarName(coll) + ".data.l.data)[" + loname + "], " + "sizeof(" + toCVars.valStruct + ") * " + len + ");\n";
			case "Index":
				idx  := st.pop();
				coll := st.pop();
				ret  := getVar();
				st.push(inst("Var", ret, instr.start, instr.end));
				[idxName, idxVar] := makeValueStruct(file, getVar(), idx, toCVars);
				res  += idxVar;
				res  += toCVars.valStruct + " " + ret + " = ";
				res  += "((" + toCVars.valStruct + " *) " + toCVars.getVarName(coll) + ".data.l.data)[__builtin_stlx_get_idx(" + idxName + ", " + toCVars.getVarName(coll) + ")];\n";
			case "Property":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Property' to C code is not yet implemented");
			case "Call":
				name   := toCVars.getVarName(st.pop());
				args   := [];
				arglen := st.pop().data;
				while (arglen > 0) {
					args   += [st.pop()];
					arglen -= 1;
				}
				argc := getVar();
				argv := getVar();
				ret  := getVar();
				st.push(inst("Var", ret, instr.start, instr.end));

				call := "u8 " + argc + " = " + #args + ";\n";
				call += toCVars.valStruct + " " + argv + "[256] = {0};\n";
				for (i in {1..#args}) {
					call += argv + "[" + (i-1) + "] = ";
					if (args[i].id == "Var") {
						call += toCVars.getVarName(args[i]);
					} else {
						[n, var] := makeValueStruct(file, getVar(), args[i], toCVars);
						call += n;
						res  += var;
					}
					call += ";\n";
				}

				call += toCVars.valStruct + " " + ret + " = ";
				call += "__builtin_stlx_get_funcptr(" + name + ")";
				call += "(" + argc + ", " + argv + ");\n";
				res  += call;
			case "NativeCall":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'NativeCall' to C code is not yet implemented");
			case "Label":
				res += instr.data + ":\n{}\n";
			case "CondJmp":
				cond := st.pop();
				[name, var] := makeValueStruct(file, getVar(), cond, toCVars);
				res += var;
				res += "if (!" + name + ".data.i" + ") goto " + instr.data + ";\n";
			case "Jmp":
				res += "goto " + instr.data + ";\n";
			case "Set":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Set' to C code is not yet implemented");
			case "List":
				args   := [];
				arglen := st.pop().data;
				idx    := 0;
				while (idx < arglen) {
					args += [st.pop()];
					idx  += 1;
				}
				[lname, lvar] := makeValueStruct(file, getVar(), instr, toCVars, arglen);
				res += lvar;
				res += lname + ".data.l.len = " + #args + ";\n";
				st.push(inst("Var", lname, instr.start, instr.end));
				for (i in {1..#args}) {
					[name, var] := makeValueStruct(file, getVar(), args[i], toCVars);
					res += var;
					res += "((" + toCVars.valStruct + " *) " + lname + ".data.l.data)[" + (#args - i) + "] = " + name + ";\n";
				}
			case "Block":
				compileErr(file, instr.start, instr.end, "Transforming IR instruction 'Block' to C code is not yet implemented");
			default:
				st.push(instr);
		}
		// global.p("Stack: " + st.toStr([instr] |=> instr.toStr()));

		// global.p("Current output:");
		// global.p(res);
		// global.p("");
		// global.p("-------");
		// global.p("");
	}

	global.pop();
	return res;
};

// Returns a list of 2 elements
// 1. string for function
// 2. list of signatures (without ';')
irProcToC := procedure(file, p) {
	// @TODO: Collect prcedure signatures
	global.push("irProcToC", [["p", p.displayStr()]]);
	toCVars := irToCVars();

	signatures := [];
	res := "";
	for (innerProc in p.ir.procs) { pointAdd([res, signatures], irProcToC(file, innerProc)); }

	procCode   := toCVars.valStruct + " " + toCVars.procPrefix + p.name + "(u8 argc, " + toCVars.valStruct + " *argv)";
	signatures += [procCode];
	procCode   += "\n{\n";

	minArgs := 0;
	for (arg in p.args) {
		if (#arg == 2) { break; }
		minArgs += 1;
	}
	if (#p.args > 0) {
		procCode += "\tAIL_ASSERT(argc <= " + #p.args + ");\n";
		if (minArgs > 0) {
			procCode += "\tAIL_ASSERT(argc >= " + minArgs + ");\n";
		}
	} else {
		procCode += "\t(void)argc;\n";
		procCode += "\t(void)argv;\n";
	}

	for (i in {1..#p.args}) {
		arg := p.args[i];
		procCode += "\t" + toCVars.valStruct + " " + arg[1] + ";\n";
		if (i < minArgs) {
			procCode += arg[1] + " = argv[" + (i-1) + "];\n";
		} else {
			procCode += "\tif (argc >= " + i + ") " + arg[1] + " = argv[" + (i-1) + "];\n";
			procCode += "\telse {\n";
			procCode += addIndents(irCodeToC(file, [arg[2]], toCVars), 2);
			procCode += "\t}\n";
		}
	}

	procCode   += addIndents(irCodeToC(file, p.ir.code, toCVars), 1);
	procCode   += "\treturn (" + toCVars.valStruct + ") {0};\n";
	procCode   += "}\n\n";
	res += procCode;

	global.pop();
	return [res, signatures];
};

// @TODO
irToC := procedure(file, ir) {
	// @TODO: Deal with procedures
	global.push("irToC", []);
	toCVars := irToCVars();
	res := "";
	res += "#include \"setlX.c\"\n";
	res += "\n";

	for (builtin in global.builtinProcs) {
		res += toCVars.valStruct + " " + toCVars.varPrefix + builtin + " = ";
		res += "{ .type = " + toCVars.enumPrefix + "Proc, .data = { .x = &__builtin_stlx_" + builtin + " }};\n";
	}
	res += "\n";

	signatures := [];
	procRes    := "";
	for (p in ir.procs) {
		[r, s]     := irProcToC(file, p);
		procRes    += r;
		signatures += s;
	}
	res += join(signatures, ";\n") + ";\n\n";
	res += procRes;

	res += "int main(void)\n{\n";
	res += addIndents(irCodeToC(file, ir.code, toCVars), 1);
	res += "\treturn 0;\n";
	res += "}\n";

	global.pop();
	return res;
};